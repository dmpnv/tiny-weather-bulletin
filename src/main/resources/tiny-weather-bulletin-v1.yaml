openapi: 3.0.1
info:
  title: Tiny Weather Bulletin API
  description: 'This is an API of weather bulletin'
  version: 1.0.0
paths:
  '/forecasts':
    get:
      tags:
        - forecasts
      summary: Return the forecasts for all registered cities
      operationId: getForecasts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForecastsList'
  '/forecasts/{city}':
    get:
      tags:
        - forecasts
      summary: Return the forecasts for a city
      parameters:
        - in: path
          name: city
          schema:
            type: string
          required: true
      operationId: getForecastsByCity
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forecast'
  '/cities':
    get:
      tags:
        - places
      summary: Returns the registered city list
      operationId: getCities
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityList'
    post:
      tags:
        - places
      summary: Register a new city
      description: Register a new city, even on duplication doesn't fail but silently ignores it
      operationId: addCity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        422:
          description: Unprocessable Entity, Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/cities/{cityId}':
    delete:
      tags:
        - places
      summary: Unregister a city
      operationId: unregisterCity
      parameters:
        - in: path
          name: cityId
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/cities/{cityId}/work-schedule':
    get:
      tags:
        - work schedules
        - places
      summary: Returns the work schedule specific for this place
      operationId: getWorkScheduleByCity
      parameters:
        - in: path
          name: cityId
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkSchedule'
    put:
      tags:
        - work schedules
        - places
      summary: Save or Update the work schedule specific for this place
      operationId: updateWorkSchedule
      parameters:
        - in: path
          name: cityId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkSchedule'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    delete:
      tags:
        - work schedules
        - places
      summary: Save or Update the work schedule specific for this place
      operationId: removeWorkSchedule
      parameters:
        - in: path
          name: cityId
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/work-schedules/default':
    get:
      tags:
        - work schedules
      summary: Returns the default work schedule
      operationId: getDefaultWorkSchedule
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkSchedule'
    put:
      tags:
        - work schedules
      summary: Save or Update the work schedule specific for this place
      operationId: updateDefaultWorkSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkSchedule'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
components:
  schemas:
    Forecast:
      type: object
      properties:
        city:
          type: string
        timezone:
          type: string
        daily:
          type: array
          items:
            $ref: '#/components/schemas/DailyForecast'
    DailyForecast:
      type: object
      properties:
        date:
          type: string
          format: date
          description: date in UTC
        morning:
          $ref: '#/components/schemas/ForecastData'
        worktime:
          $ref: '#/components/schemas/ForecastData'
        evening:
          $ref: '#/components/schemas/ForecastData'
    ForecastData:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/Period'
        average:
          type: number
          format: double
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        humidity:
          type: integer
          format: int32
    ForecastsList:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ListMetadata'
        forecasts:
          type: array
          items:
            $ref: '#/components/schemas/Forecast'
    Period:
      type: object
      properties:
        start:
          type: string
        finish:
          type: string
    City:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        country:
          type: string
        region:
          type: string
        lon:
          type: string
        lat:
          type: string
        timezone:
          type: string
    CityList:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ListMetadata'
        cities:
          type: array
          items:
            $ref: '#/components/schemas/City'
    WorkSchedule:
      type: object
      properties:
        mon:
          $ref: '#/components/schemas/Hours'
        tue:
          $ref: '#/components/schemas/Hours'
        wed:
          $ref: '#/components/schemas/Hours'
        thu:
          $ref: '#/components/schemas/Hours'
        fri:
          $ref: '#/components/schemas/Hours'
        sat:
          $ref: '#/components/schemas/Hours'
        sun:
          $ref: '#/components/schemas/Hours'
    Hours:
      type: object
      properties:
        start:
          type: string
        finish:
          type: string
    Result:
      type: object
      properties:
        code:
          type: string
        entityId:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
    ListMetadata:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        page_count:
          type: integer
        total_count:
          type: integer
    ValidationMessage:
      type: object
      properties:
        key:
          type: string
        message:
          type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - ApiKeyAuth: []
